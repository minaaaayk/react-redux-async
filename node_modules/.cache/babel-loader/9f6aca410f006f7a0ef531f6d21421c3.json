{"ast":null,"code":"import { actions, PostData } from '../Types/actionTypes';\n// import { updateObject } from '../utility';\nconst initialState = {\n  posts: []\n};\n\nconst GetPosts = async url => {\n  const response = await fetch(url);\n  const {\n    data\n  } = await response.json();\n  return data;\n};\n\nconst PostDatatoServer = async (url, data) => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  });\n  const {\n    data2\n  } = await response.json();\n  return data2;\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.GETALLPOSTS:\n      {\n        GetPosts('https://jsonplaceholder.typicode.com/posts').then(data => {\n          //  state.posts = [\n          //     ...data.posts\n          //  ]\n          console.log(data);\n        });\n      }\n\n    case actions.GETONEPOST:\n      {\n        GetPosts('https://jsonplaceholder.typicode.com/posts/' + action.id).then(data => {\n          // state.posts = [\n          //     ...data.posts\n          //  ]\n          console.log(data);\n        });\n      }\n\n    case actions.GETCOMMENTS:\n      {}\n\n    case actions.GETCOMMENTS:\n      {}\n\n    case actions.POST:\n      {\n        PostData('https://jsonplaceholder.typicode.com/posts', action.data).then(newPost => {\n          //  state.posts = [\n          //      ...state.posts.push(newPost)\n          //  ]\n          console.log(newPost);\n        });\n      }\n\n    case actions.DELETE:\n      {}\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/mina/Desktop/test/my-app/src/store/reducers/post.ts"],"names":["actions","PostData","initialState","posts","GetPosts","url","response","fetch","data","json","PostDatatoServer","method","body","JSON","stringify","headers","data2","reducer","state","action","type","GETALLPOSTS","then","console","log","GETONEPOST","id","GETCOMMENTS","POST","newPost","DELETE"],"mappings":"AAAA,SAAyBA,OAAzB,EAAoDC,QAApD,QAAmE,sBAAnE;AAEA;AAEA,MAAMC,YAAkB,GAAG;AACvBC,EAAAA,KAAK,EAAE;AADgB,CAA3B;;AAIA,MAAMC,QAAQ,GAAG,MAAOC,GAAP,IAAuC;AACpD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAW,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACA,SAAOD,IAAP;AACH,CAJD;;AAKA,MAAME,gBAAgB,GAAG,OAAOL,GAAP,EAAoBG,IAApB,KAAiD;AACtE,QAAMF,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAAD,EAA+C;AACvEI,IAAAA,MAAM,EAAE,MAD+D;AAEvEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAFiE;AAGvEO,IAAAA,OAAO,EAAE;AACT,sBAAgB;AADP;AAH8D,GAA/C,CAA5B;AAOA,QAAM;AAAEC,IAAAA;AAAF,MAAY,MAAMV,QAAQ,CAACG,IAAT,EAAxB;AACA,SAAOO,KAAP;AACH,CAVD;;AAWA,MAAMC,OAAO,GAAG,CAAEC,KAAK,GAAGhB,YAAV,EAAwBiB,MAAxB,KAAqD;AACjE,UAASA,MAAM,CAACC,IAAhB;AACI,SAAKpB,OAAO,CAACqB,WAAb;AAAyB;AACpBjB,QAAAA,QAAQ,CAAC,4CAAD,CAAR,CAAuDkB,IAAvD,CACKd,IAAD,IAAgB;AACb;AACA;AACA;AACAe,UAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AAGF,SARL;AAUJ;;AACD,SAAKR,OAAO,CAACyB,UAAb;AAAwB;AACpBrB,QAAAA,QAAQ,CAAC,gDAAkDe,MAAD,CAA6BO,EAA/E,CAAR,CAA4FJ,IAA5F,CACKd,IAAD,IAAgB;AACZ;AACA;AACA;AACAe,UAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AAEF,SAPN;AASH;;AACD,SAAKR,OAAO,CAAC2B,WAAb;AAAyB,OACxB;;AACD,SAAK3B,OAAO,CAAC2B,WAAb;AAAyB,OACxB;;AACD,SAAK3B,OAAO,CAAC4B,IAAb;AAAkB;AACd3B,QAAAA,QAAQ,CAAC,4CAAD,EAAgDkB,MAAD,CAAqBX,IAApE,CAAR,CAAmFc,IAAnF,CACMO,OAAD,IAAkB;AACf;AACA;AACA;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAYK,OAAZ;AAEF,SAPN;AASH;;AACD,SAAK7B,OAAO,CAAC8B,MAAb;AAAoB,OACnB;AAxCL;;AA2CA,SAAOZ,KAAP;AACH,CA7CD;;AA+CA,eAAeD,OAAf","sourcesContent":["import {PostActionTypes, actions, GetOnePostAction, PostData} from '../Types/actionTypes'\nimport {Posts, Post} from '../Types/States'\n// import { updateObject } from '../utility';\n\nconst initialState:Posts = {\n    posts: []\n};\n\nconst GetPosts = async (url: string): Promise<Posts> => {\n    const response = await fetch(url)\n    const { data } = await response.json()\n    return data\n}\nconst PostDatatoServer = async (url: string, data:Post): Promise<Post> => {\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n    })\n    const { data2 } = await response.json()\n    return data2\n}\nconst reducer = ( state = initialState, action: PostActionTypes ) => {\n    switch ( action.type ) {\n        case actions.GETALLPOSTS:{\n             GetPosts('https://jsonplaceholder.typicode.com/posts').then(\n                 (data:Posts) => {\n                    //  state.posts = [\n                    //     ...data.posts\n                    //  ]\n                    console.log(data);\n                    \n                         \n                 }\n             );\n        }\n        case actions.GETONEPOST:{\n            GetPosts('https://jsonplaceholder.typicode.com/posts/' +  (action as GetOnePostAction).id ).then(\n                (data:Posts) => {\n                    // state.posts = [\n                    //     ...data.posts\n                    //  ]\n                    console.log(data);\n                    \n                 }\n             );\n        }\n        case actions.GETCOMMENTS:{\n        }\n        case actions.GETCOMMENTS:{\n        }\n        case actions.POST:{\n            PostData('https://jsonplaceholder.typicode.com/posts', (action as PostData).data ).then(\n                 (newPost:Post) => {\n                    //  state.posts = [\n                    //      ...state.posts.push(newPost)\n                    //  ]\n                    console.log(newPost);\n                    \n                 }\n             );\n        }\n        case actions.DELETE:{\n        }\n        \n    }\n    return state;\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}